//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Tue Dec 11 18:39:18 CET 2012
//----------------------------------------------------

package org.conqat.lib.simulink.builder;

import java.util.ArrayList;
import java.util.List;

import org.conqat.lib.commons.collections.PairList;
import org.conqat.lib.commons.logging.ILogger;
import org.conqat.lib.commons.string.StringUtils;

/**
 * CUP v0.10k TUM Edition 20050516 generated parser.
 * 
 * @version Tue Dec 11 18:39:18 CET 2012
 */
public class MDLParser extends java_cup.runtime.lr_parser {

	/** Default constructor. */
	public MDLParser() {
		super();
	}

	/** Constructor which sets the default scanner. */
	public MDLParser(java_cup.runtime.Scanner s) {
		super(s);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\034\000\002\002\004\000\002\003\003\000\002\004"
			+ "\004\000\002\004\003\000\002\005\006\000\002\005\005"
			+ "\000\002\011\004\000\002\011\003\000\002\010\003\000"
			+ "\002\010\003\000\002\006\004\000\002\006\004\000\002"
			+ "\007\003\000\002\007\003\000\002\007\003\000\002\012"
			+ "\003\000\002\012\003\000\002\012\003\000\002\013\005"
			+ "\000\002\013\003\000\002\015\004\000\002\015\003\000"
			+ "\002\016\003\000\002\016\003\000\002\016\003\000\002"
			+ "\017\002\000\002\014\005\000\002\014\004" });

	/** Access to production table. */
	@Override
	public short[][] production_table() {
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\044\000\004\014\007\001\002\000\006\002\000\014"
			+ "\007\001\002\000\004\002\045\001\002\000\006\002\ufffe"
			+ "\014\ufffe\001\002\000\004\005\010\001\002\000\006\006"
			+ "\013\014\014\001\002\000\006\006\043\014\014\001\002"
			+ "\000\006\006\ufff9\014\ufff9\001\002\000\010\002\ufffc\006"
			+ "\ufffc\014\ufffc\001\002\000\020\004\020\005\010\007\030"
			+ "\011\023\012\021\013\026\014\027\001\002\000\006\006"
			+ "\ufff8\014\ufff8\001\002\000\006\006\ufffa\014\ufffa\001\002"
			+ "\000\006\006\ufff5\014\ufff5\001\002\000\022\004\ufff0\006"
			+ "\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0"
			+ "\001\002\000\022\004\ufff2\006\ufff2\010\ufff2\012\ufff2\013"
			+ "\ufff2\014\ufff2\015\ufff2\016\ufff2\001\002\000\006\006\ufff4"
			+ "\014\ufff4\001\002\000\010\006\uffec\011\uffec\014\uffec\001"
			+ "\002\000\010\006\ufff3\011\042\014\ufff3\001\002\000\006"
			+ "\006\ufff7\014\ufff7\001\002\000\022\004\ufff1\006\ufff1\010"
			+ "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\001\002"
			+ "\000\006\006\ufff6\014\ufff6\001\002\000\012\004\020\010"
			+ "\032\012\021\013\026\001\002\000\016\004\uffe8\010\035"
			+ "\012\uffe8\013\uffe8\015\034\016\036\001\002\000\006\006"
			+ "\uffe6\014\uffe6\001\002\000\016\004\uffee\010\uffee\012\uffee"
			+ "\013\uffee\015\uffee\016\uffee\001\002\000\010\004\uffeb\012"
			+ "\uffeb\013\uffeb\001\002\000\006\006\uffe7\014\uffe7\001\002"
			+ "\000\010\004\uffea\012\uffea\013\uffea\001\002\000\010\004"
			+ "\uffe9\012\uffe9\013\uffe9\001\002\000\010\004\020\012\021"
			+ "\013\026\001\002\000\016\004\uffef\010\uffef\012\uffef\013"
			+ "\uffef\015\uffef\016\uffef\001\002\000\010\006\uffed\011\uffed"
			+ "\014\uffed\001\002\000\010\002\ufffd\006\ufffd\014\ufffd\001"
			+ "\002\000\006\006\ufffb\014\ufffb\001\002\000\004\002\001"
			+ "\001\002\000\006\002\uffff\014\uffff\001\002" });

	/** Access to parse-action table. */
	@Override
	public short[][] action_table() {
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\044\000\010\003\004\004\003\005\005\001\001\000"
			+ "\004\005\045\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\012\005\011\006\014\010\015\011"
			+ "\010\001\001\000\010\005\011\006\014\010\043\001\001"
			+ "\000\002\001\001\000\002\001\001\000\012\007\024\012"
			+ "\016\014\021\015\023\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\006\012\032\013\030\001\001\000\006\016\037\017\036"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\004\012\040\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	@Override
	public short[][] reduce_table() {
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$MDLParser$actions action_obj;

	/** Action encapsulation object initializer. */
	@Override
	protected void init_actions() {
		action_obj = new CUP$MDLParser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	@Override
	public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser,
			java.util.Stack stack, int top) throws java.lang.Exception {
		/* call code in generated class */
		return action_obj.CUP$MDLParser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	@Override
	public int start_state() {
		return 0;
	}

	/** Indicates start production. */
	@Override
	public int start_production() {
		return 0;
	}

	/** <code>EOF</code> Symbol index. */
	@Override
	public int EOF_sym() {
		return 0;
	}

	/** <code>error</code> Symbol index. */
	@Override
	public int error_sym() {
		return 1;
	}

	private ILogger logger;

	public MDLParser(java_cup.runtime.Scanner scanner, ILogger logger) {
		super(scanner);
		this.logger = logger;
	}

	public void debug(String message) {
		if (logger != null) {
			logger.debug(message);
		} else {
			System.out.println(message);
		}
	}

	@Override
	public void report_error(String message, Object info) {
		MDLParserException exception = createException(message, info);

		if (logger != null) {
			logger.warn(exception.getMessage());
		} else {
			System.err.println(exception.getMessage());
		}
	}

	@Override
	public void report_fatal_error(String message, Object info) throws MDLParserException {
		throw createException(message, info);
	}

	public MDLParserException createException(String message, Object info) {
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol symbol = ((java_cup.runtime.Symbol) info);

			int line = symbol.left + 1;
			int column = symbol.right + 1;

			return new MDLParserException(message + " at line: " + line + ", column: " + column, line,
					column);
		}

		return new MDLParserException(message);
	}

	static class Parameter {
		public final String name;
		public final String value;

		public Parameter(String name, String value) {
			this.name = name;
			this.value = value;
		}
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$MDLParser$actions {
	private final MDLParser parser;

	/** Constructor */
	CUP$MDLParser$actions(MDLParser parser) {
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$MDLParser$do_action(int CUP$MDLParser$act_num,
			java_cup.runtime.lr_parser CUP$MDLParser$parser, java.util.Stack CUP$MDLParser$stack,
			int CUP$MDLParser$top) throws java.lang.Exception {
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$MDLParser$result;

		/* select the action based on the action number */
		switch (CUP$MDLParser$act_num) {
		/* . . . . . . . . . . . . . . . . . . . . */
			case 27: // Array ::= LBRACK RBRACK
			{
				String RESULT = null;
				RESULT = "[]";
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						10/* Array */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 26: // Array ::= LBRACK LiteralList RBRACK
			{
				String RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).right;
				List<String> l = (List<String>) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).value;
				RESULT = "[" + StringUtils.concat(l, ", ") + "]";
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						10/* Array */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 25: // Empty ::=
			{
				Object RESULT = null;

				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						13/* Empty */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 24: // OptSeperator ::= Empty
			{
				Object RESULT = null;

				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						12/* OptSeperator */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 23: // OptSeperator ::= SEMICOLON
			{
				Object RESULT = null;

				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						12/* OptSeperator */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 22: // OptSeperator ::= COMMA
			{
				Object RESULT = null;

				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						12/* OptSeperator */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 21: // StringList ::= STRING_LITERAL
			{
				StringBuilder RESULT = null;
				int sleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int sright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				String s = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				StringBuilder list = new StringBuilder();
				list.append(s);
				RESULT = list;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						11/* StringList */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 20: // StringList ::= StringList STRING_LITERAL
			{
				StringBuilder RESULT = null;
				int listleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).left;
				int listright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).right;
				StringBuilder list = (StringBuilder) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).value;
				int sleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int sright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				String s = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				list.append(s);
				RESULT = list;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						11/* StringList */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 19: // LiteralList ::= Literal
			{
				List<String> RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				String l = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				ArrayList<String> list = new ArrayList<String>();
				list.add(l);
				RESULT = list;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						9/* LiteralList */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 18: // LiteralList ::= LiteralList OptSeperator Literal
			{
				List<String> RESULT = null;
				int listleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 2)).left;
				int listright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 2)).right;
				List<String> list = (List<String>) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 2)).value;
				int lleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				String l = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				list.add(l);
				RESULT = list;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						9/* LiteralList */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 17: // Literal ::= BOOLEAN_LITERAL
			{
				String RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				String l = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				RESULT = l;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						8/* Literal */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 16: // Literal ::= FLOAT_LITERAL
			{
				String RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				String l = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				RESULT = l;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						8/* Literal */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 15: // Literal ::= INT_LITERAL
			{
				String RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				String l = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				RESULT = l;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						8/* Literal */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 14: // Value ::= StringList
			{
				String RESULT = null;
				int sleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int sright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				StringBuilder s = (StringBuilder) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				RESULT = s.toString();
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						5/* Value */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 13: // Value ::= Array
			{
				String RESULT = null;
				int aleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int aright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				String a = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				RESULT = a;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						5/* Value */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 12: // Value ::= Literal
			{
				String RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				String l = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				RESULT = l;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						5/* Value */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 11: // Parameter ::= IDENTIFIER IDENTIFIER
			{
				MDLParser.Parameter RESULT = null;
				int i1left = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).left;
				int i1right = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).right;
				String i1 = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).value;
				int i2left = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int i2right = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				String i2 = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				RESULT = new MDLParser.Parameter(i1, i2);
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						4/* Parameter */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 10: // Parameter ::= IDENTIFIER Value
			{
				MDLParser.Parameter RESULT = null;
				int ileft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).left;
				int iright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).right;
				String i = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).value;
				int aleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int aright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				String a = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				RESULT = new MDLParser.Parameter(i, a);
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						4/* Parameter */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 9: // SectionOrParameter ::= Parameter
			{
				Object RESULT = null;
				int pleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int pright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				MDLParser.Parameter p = (MDLParser.Parameter) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				RESULT = p;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						6/* SectionOrParameter */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 8: // SectionOrParameter ::= Section
			{
				Object RESULT = null;
				int bleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int bright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				MDLSection b = (MDLSection) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				RESULT = b;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						6/* SectionOrParameter */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 7: // SectionOrParameterList ::= SectionOrParameter
			{
				List<Object> RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				Object e = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				ArrayList<Object> list = new ArrayList<Object>();
				list.add(e);
				RESULT = list;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						7/* SectionOrParameterList */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 6: // SectionOrParameterList ::= SectionOrParameterList
						// SectionOrParameter
			{
				List<Object> RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).right;
				List<Object> l = (List<Object>) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).value;
				int eleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				Object e = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				l.add(e);
				RESULT = l;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						7/* SectionOrParameterList */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 5: // Section ::= IDENTIFIER LBRACE RBRACE
			{
				MDLSection RESULT = null;
				int ileft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 2)).left;
				int iright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 2)).right;
				String i = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 2)).value;
				RESULT = new MDLSection(i, ileft + 1);
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						3/* Section */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 2)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 4: // Section ::= IDENTIFIER LBRACE SectionOrParameterList RBRACE
			{
				MDLSection RESULT = null;
				int ileft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 3)).left;
				int iright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 3)).right;
				String i = (String) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 3)).value;
				int lleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).right;
				List<Object> l = (List<Object>) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).value;
				ArrayList<MDLSection> sections = new ArrayList<MDLSection>();
				PairList<String, String> parameters = new PairList<String, String>();

				for (Object o : l) {
					if (o instanceof MDLSection) {
						sections.add((MDLSection) o);
					} else if (o instanceof MDLParser.Parameter) {
						MDLParser.Parameter param = (MDLParser.Parameter) o;
						parameters.add(param.name, param.value);
					} else {
						throw new IllegalStateException("Parser implementation error");
					}
				}

				RESULT = new MDLSection(i, sections, parameters, ileft + 1);
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						3/* Section */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 3)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 3: // SectionList ::= Section
			{
				List<MDLSection> RESULT = null;
				int bleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int bright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				MDLSection b = (MDLSection) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				ArrayList<MDLSection> list = new ArrayList<MDLSection>();
				list.add(b);
				RESULT = list;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						2/* SectionList */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 2: // SectionList ::= SectionList Section
			{
				List<MDLSection> RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).right;
				List<MDLSection> l = (List<MDLSection>) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).value;
				int bleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int bright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				MDLSection b = (MDLSection) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				l.add(b);
				RESULT = l;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						2/* SectionList */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 1: // File ::= SectionList
			{
				MDLSection RESULT = null;
				int lleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).left;
				int lright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).right;
				List<MDLSection> l = (List<MDLSection>) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 0)).value;
				RESULT = new MDLSection("", l, new PairList<String, String>(), -1);
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						1/* File */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				return CUP$MDLParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 0: // $START ::= File EOF
			{
				Object RESULT = null;
				int start_valleft = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).left;
				int start_valright = ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).right;
				MDLSection start_val = (MDLSection) ((java_cup.runtime.Symbol) CUP$MDLParser$stack
						.elementAt(CUP$MDLParser$top - 1)).value;
				RESULT = start_val;
				CUP$MDLParser$result = new java_cup.runtime.Symbol(
						0/* $START */,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 1)).left,
						((java_cup.runtime.Symbol) CUP$MDLParser$stack.elementAt(CUP$MDLParser$top - 0)).right,
						RESULT);
			}
				/* ACCEPT */
				CUP$MDLParser$parser.done_parsing();
				return CUP$MDLParser$result;

				/* . . . . . . */
			default:
				throw new Exception("Invalid action number found in internal parse table");

		}
	}
}
