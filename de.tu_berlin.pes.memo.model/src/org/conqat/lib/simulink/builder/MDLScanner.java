/* The following code was generated by JFlex 1.4.1 on 11.12.12 18:39 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2004  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * This program is free software; you can redistribute it and/or modify    *
 * it under the terms of the GNU General Public License. See the file      *
 * COPYRIGHT for more information.                                         *
 *                                                                         *
 * This program is distributed in the hope that it will be useful,         *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of          *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
 * GNU General Public License for more details.                            *
 *                                                                         *
 * You should have received a copy of the GNU General Public License along *
 * with this program; if not, write to the Free Software Foundation, Inc., *
 * 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA                 *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* $Author: deissenb $
 $Revision: 5448 $ */

package org.conqat.lib.simulink.builder;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4.1 on 11.12.12 18:39 from the specification file
 * <tt>D:/Projekte/MeMo/MeMo_SVN_Local/robert/Playground/de.tu_berlin.pes.memo.model/grammar/mdl.flex</tt>
 */
public class MDLScanner implements java_cup.runtime.Scanner {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int STRING = 1;
	public static final int YYINITIAL = 0;

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\23"
			+ "\1\4\1\7\2\0\1\24\3\0\1\22\1\35\1\10\1\6\1\0"
			+ "\1\11\1\16\2\15\4\17\2\5\1\0\1\36\4\0\1\7\3\14"
			+ "\1\20\1\21\1\20\5\7\1\12\13\7\1\13\2\7\1\33\1\25"
			+ "\1\34\1\0\1\7\1\0\1\14\1\37\1\14\1\20\1\21\1\30"
			+ "\5\7\1\12\1\7\1\27\1\26\2\7\1\41\1\7\1\40\3\7" + "\1\13\2\7\1\31\1\0\1\32\uff82\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\2\0\1\1\3\2\1\3\1\1\2\4\1\3\1\5"
			+ "\1\4\1\6\1\7\1\10\1\11\1\12\1\13\2\14" + "\1\15\1\16\1\1\1\17\1\3\1\17\1\0\1\3"
			+ "\1\4\1\3\1\17\1\3\1\0\3\3\1\20\1\4" + "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"
			+ "\1\31\1\17\1\0\1\17\1\3\1\17\1\4\1\17" + "\4\3\1\17\1\4\25\3\1\0\2\3\1\0\2\3"
			+ "\1\0\2\3\1\0\2\3\1\0\2\3\1\0\2\3" + "\1\0\1\3\1\17\1\0\5\17";

	private static int[] zzUnpackAction() {
		int[] result = new int[109];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\42\0\104\0\146\0\104\0\210\0\252\0\314"
			+ "\0\356\0\u0110\0\u0132\0\104\0\u0154\0\104\0\104\0\104"
			+ "\0\104\0\104\0\104\0\u0176\0\u0198\0\104\0\104\0\u01ba"
			+ "\0\u01dc\0\104\0\104\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286"
			+ "\0\u02a8\0\u02ca\0\u02ec\0\u030e\0\u0330\0\356\0\u0352\0\104"
			+ "\0\104\0\104\0\104\0\104\0\104\0\104\0\104\0\104"
			+ "\0\u0374\0\u0396\0\u03b8\0\356\0\356\0\u03da\0\u03fc\0\u041e"
			+ "\0\u0440\0\u0462\0\u0484\0\u04a6\0\u04c8\0\u04ea\0\u050c\0\u052e"
			+ "\0\u0550\0\u0572\0\u0594\0\u05b6\0\u05d8\0\u05fa\0\u061c\0\u063e"
			+ "\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\u070a\0\u072c\0\u074e"
			+ "\0\u0770\0\u0792\0\u07b4\0\u07d6\0\u07f8\0\u081a\0\u083c\0\u085e"
			+ "\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e"
			+ "\0\u0990\0\u09b2\0\u09d4\0\u09f6\0\u0a18\0\u0a3a\0\u0a3a\0\u0a5c"
			+ "\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[109];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"
			+ "\1\13\3\11\3\7\2\11\1\3\1\14\2\3\1\15" + "\2\11\1\16\1\17\1\20\1\21\1\22\1\23\3\11"
			+ "\1\24\1\25\1\26\20\24\1\27\1\24\1\30\14\24" + "\44\0\1\5\37\0\1\6\1\4\1\5\37\6\5\0"
			+ "\1\7\1\31\2\0\1\7\1\32\2\0\3\7\1\33" + "\1\34\6\0\1\33\16\0\1\31\3\0\1\31\3\0"
			+ "\3\31\26\0\16\11\4\0\3\11\6\0\3\11\4\0" + "\1\11\1\35\1\36\2\11\1\37\3\11\3\35\2\11"
			+ "\4\0\3\11\6\0\3\11\5\0\1\40\1\31\2\0" + "\1\41\1\32\1\42\1\0\1\43\1\44\1\45\1\33"
			+ "\1\34\6\0\1\33\15\0\16\11\4\0\1\11\1\46" + "\1\47\6\0\3\11\2\24\1\0\20\24\1\0\1\24"
			+ "\1\0\16\24\1\26\20\24\1\0\1\24\1\0\14\24" + "\2\50\1\0\20\50\1\51\1\52\1\53\1\50\1\54"
			+ "\1\55\6\50\1\56\1\57\1\60\5\0\1\31\3\0" + "\1\31\3\0\3\31\1\33\1\34\6\0\1\33\16\0"
			+ "\1\61\2\0\1\62\1\61\3\0\3\61\2\0\1\62" + "\23\0\1\11\1\35\1\63\2\11\1\35\1\64\2\11"
			+ "\3\35\1\65\1\66\4\0\2\11\1\65\6\0\3\11" + "\4\0\1\11\1\63\3\11\1\63\3\11\3\63\2\11"
			+ "\4\0\3\11\6\0\3\11\4\0\1\11\1\67\1\63" + "\2\11\1\67\1\64\2\11\3\67\1\65\1\66\4\0"
			+ "\2\11\1\65\6\0\3\11\5\0\1\40\1\31\2\0" + "\1\40\3\0\3\40\1\33\1\34\6\0\1\33\16\0"
			+ "\1\40\1\31\2\0\1\41\1\32\2\0\1\43\1\44" + "\1\45\1\33\1\34\6\0\1\33\16\0\1\70\3\0"
			+ "\1\71\2\0\6\70\6\0\1\70\6\0\1\70\7\0" + "\1\40\1\31\2\0\1\72\1\32\2\0\3\72\1\33"
			+ "\1\34\6\0\1\33\16\0\1\40\1\31\2\0\1\45" + "\1\32\2\0\3\45\1\33\1\34\6\0\1\33\16\0"
			+ "\1\40\1\31\2\0\1\73\1\32\2\0\3\73\1\33" + "\1\34\6\0\1\33\15\0\16\11\4\0\2\11\1\46"
			+ "\6\0\3\11\5\0\1\61\3\0\1\61\3\0\3\61" + "\1\33\7\0\1\33\16\0\1\61\3\0\1\61\3\0"
			+ "\3\61\26\0\1\11\1\63\3\11\1\63\3\11\3\63" + "\1\65\1\66\4\0\2\11\1\65\6\0\3\11\4\0"
			+ "\1\11\1\74\2\11\1\75\1\74\3\11\3\74\2\11" + "\1\62\3\0\3\11\6\0\3\11\4\0\1\11\1\67"
			+ "\1\63\2\11\1\67\3\11\3\67\1\65\1\66\4\0" + "\2\11\1\65\6\0\3\11\5\0\1\76\3\0\1\76"
			+ "\1\32\1\0\6\76\6\0\1\76\6\0\1\76\7\0" + "\1\70\3\0\1\71\1\32\1\0\6\70\6\0\1\70"
			+ "\6\0\1\70\7\0\1\40\1\31\2\0\1\77\1\32" + "\2\0\3\77\1\33\1\34\6\0\1\33\16\0\1\40"
			+ "\1\31\2\0\1\100\1\32\2\0\3\100\1\33\1\34" + "\6\0\1\33\15\0\1\11\1\74\3\11\1\74\3\11"
			+ "\3\74\1\65\1\11\4\0\2\11\1\65\6\0\3\11" + "\4\0\1\11\1\74\3\11\1\74\3\11\3\74\2\11"
			+ "\4\0\3\11\6\0\3\11\5\0\1\101\3\0\1\101" + "\1\32\1\0\6\101\6\0\1\101\6\0\1\101\7\0"
			+ "\1\40\1\31\2\0\1\102\1\32\2\0\3\102\1\33" + "\1\34\6\0\1\33\16\0\1\40\1\31\2\0\1\103"
			+ "\1\32\2\0\3\103\1\33\1\34\6\0\1\33\16\0" + "\1\104\3\0\1\104\1\32\1\0\6\104\6\0\1\104"
			+ "\6\0\1\104\7\0\1\40\1\31\2\0\1\105\1\32" + "\2\0\3\105\1\33\1\34\6\0\1\33\16\0\1\40"
			+ "\1\31\2\0\1\106\1\32\2\0\3\106\1\33\1\34" + "\6\0\1\33\16\0\1\107\3\0\1\107\1\32\1\0"
			+ "\6\107\6\0\1\107\6\0\1\107\7\0\1\40\1\31" + "\2\0\1\110\1\32\2\0\3\110\1\33\1\34\6\0"
			+ "\1\33\16\0\1\40\1\31\2\0\1\111\1\32\2\0" + "\3\111\1\33\1\34\6\0\1\33\16\0\1\112\3\0"
			+ "\1\112\1\32\1\0\6\112\6\0\1\112\6\0\1\112" + "\7\0\1\40\1\31\2\0\1\113\1\32\2\0\3\113"
			+ "\1\33\1\34\6\0\1\33\16\0\1\40\1\31\2\0" + "\1\114\1\32\2\0\3\114\1\33\1\34\6\0\1\33"
			+ "\16\0\1\115\3\0\1\115\1\32\1\0\6\115\6\0" + "\1\115\6\0\1\115\7\0\1\40\1\31\2\0\1\116"
			+ "\1\32\2\0\3\116\1\33\1\34\6\0\1\33\16\0" + "\1\40\1\31\2\0\1\117\1\32\2\0\3\117\1\33"
			+ "\1\34\6\0\1\33\16\0\1\120\3\0\1\120\1\32" + "\1\0\6\120\6\0\1\120\6\0\1\120\7\0\1\40"
			+ "\1\31\2\0\1\121\1\32\2\0\3\121\1\33\1\34" + "\6\0\1\33\16\0\1\40\1\31\2\0\1\122\1\32"
			+ "\2\0\3\122\1\33\1\34\6\0\1\33\16\0\1\123" + "\3\0\1\123\1\32\1\0\6\123\6\0\1\123\6\0"
			+ "\1\123\7\0\1\40\1\31\2\0\1\124\1\32\2\0" + "\3\124\1\33\1\34\6\0\1\33\16\0\1\40\1\31"
			+ "\2\0\1\125\1\32\2\0\3\125\1\33\1\34\6\0" + "\1\33\16\0\1\126\3\0\1\126\1\32\1\0\6\126"
			+ "\6\0\1\126\6\0\1\126\7\0\1\40\1\31\2\0" + "\1\127\1\32\2\0\3\127\1\33\1\34\6\0\1\33"
			+ "\16\0\1\40\1\31\2\0\1\130\1\32\2\0\3\130" + "\1\33\1\34\6\0\1\33\16\0\1\131\3\0\1\131"
			+ "\1\32\1\0\6\131\6\0\1\131\6\0\1\131\7\0" + "\1\40\1\31\2\0\1\132\1\32\2\0\3\132\1\33"
			+ "\1\34\6\0\1\33\16\0\1\40\1\31\2\0\1\133" + "\1\32\2\0\3\133\1\33\1\34\6\0\1\33\16\0"
			+ "\1\134\3\0\1\134\1\32\1\0\6\134\6\0\1\134" + "\6\0\1\134\7\0\1\40\1\31\2\0\1\135\1\32"
			+ "\2\0\3\135\1\33\1\34\6\0\1\33\16\0\1\40" + "\1\31\2\0\1\136\1\32\2\0\3\136\1\33\1\34"
			+ "\6\0\1\33\16\0\1\137\3\0\1\137\1\32\1\0" + "\6\137\6\0\1\137\6\0\1\137\7\0\1\40\1\31"
			+ "\2\0\1\140\1\32\2\0\3\140\1\33\1\34\6\0" + "\1\33\16\0\1\40\1\31\2\0\1\141\1\32\2\0"
			+ "\3\141\1\33\1\34\6\0\1\33\16\0\1\142\3\0" + "\1\142\1\32\1\0\6\142\6\0\1\142\6\0\1\142"
			+ "\7\0\1\40\1\31\2\0\1\143\1\32\2\0\3\143" + "\1\33\1\34\6\0\1\33\16\0\1\40\1\31\2\0"
			+ "\1\144\1\32\2\0\3\144\1\33\1\34\6\0\1\33" + "\16\0\1\145\3\0\1\145\1\32\1\0\6\145\6\0"
			+ "\1\145\6\0\1\145\7\0\1\40\1\31\2\0\1\146" + "\1\32\2\0\3\146\1\33\1\34\6\0\1\33\16\0"
			+ "\1\40\1\31\2\0\1\147\1\32\2\0\3\147\1\33" + "\1\34\6\0\1\33\16\0\1\150\3\0\1\150\1\32"
			+ "\1\0\6\150\6\0\1\150\6\0\1\150\7\0\1\40" + "\1\31\2\0\1\151\1\32\2\0\3\151\1\33\1\34"
			+ "\6\0\1\33\23\0\1\32\34\0\1\40\1\31\2\0" + "\1\152\1\32\2\0\3\152\1\33\1\34\6\0\1\33"
			+ "\16\0\1\40\1\31\2\0\1\153\1\32\2\0\3\153" + "\1\33\1\34\6\0\1\33\16\0\1\40\1\31\2\0"
			+ "\1\154\1\32\2\0\3\154\1\33\1\34\6\0\1\33" + "\16\0\1\40\1\31\2\0\1\155\1\32\2\0\3\155"
			+ "\1\33\1\34\6\0\1\33\16\0\1\40\1\31\2\0" + "\1\40\1\32\2\0\3\40\1\33\1\34\6\0\1\33"
			+ "\11\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[2856];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error",
			"Error: could not match input", "Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\2\0\1\11\1\1\1\11\6\1\1\11\1\1\6\11"
			+ "\2\1\2\11\2\1\2\11\1\0\5\1\1\0\5\1" + "\11\11\1\1\1\0\40\1\1\0\2\1\1\0\2\1"
			+ "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1" + "\1\0\2\1\1\0\5\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[109];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the textposition at the last state to be included in yytext */
	private int zzPushbackPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/* user code: */

	private StringBuilder string = new StringBuilder();

	/*
	 * To create a new java_cup.runtime.Symbol with information about the current
	 * token, the token will have no value in this case.
	 */
	private Symbol symbol(int type) {
		// System.out.println("- '"+yytext()+"' ("+type+")");
		return new Symbol(type, yyline, yycolumn);
	}

	/*
	 * Also creates a new java_cup.runtime.Symbol with information about the
	 * current token, but this object has a value.
	 */
	private Symbol symbol(int type, Object value) {
		// System.out.println("- '"+yytext()+"' ("+type+")");
		return new Symbol(type, yyline, yycolumn, value);
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 *
	 * @param in
	 *           the java.io.Reader to read input from.
	 */
	public MDLScanner(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 *
	 * @param in
	 *           the java.io.Inputstream to read input from.
	 */
	public MDLScanner(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed
	 *           the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 132) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do {
				map[j++] = value;
			} while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *               if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzPushbackPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);

		if (numRead < 0) {
			return true;
		} else {
			zzEndRead += numRead;
			return false;
		}
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null) {
			zzReader.close();
		}
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the old
	 * reader.
	 *
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 *
	 * @param reader
	 *           the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState
	 *           the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos
	 *           the position of the character to fetch. A value from 0 to
	 *           yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen". If this method is called, something is seriously
	 * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done in error fallback
	 * rules.
	 *
	 * @param errorCode
	 *           the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number
	 *           the number of characters to be read again. This number must not
	 *           be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength()) {
			zzScanError(ZZ_PUSHBACK_2BIG);
		}

		zzMarkedPos -= number;
	}

	/**
	 * Contains user EOF-code, which will be executed exactly once, when the end
	 * of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException {
		if (!zzEOFDone) {
			zzEOFDone = true;
			yyclose();
		}
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @exception java.io.IOException
	 *               if any I/O-Error occurs
	 */
	@Override
	public java_cup.runtime.Symbol next_token() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
					case '\u000B':
					case '\u000C':
					case '\u0085':
					case '\u2028':
					case '\u2029':
						yyline++;
						yycolumn = 0;
						zzR = false;
						break;
					case '\r':
						yyline++;
						yycolumn = 0;
						zzR = true;
						break;
					case '\n':
						if (zzR) {
							zzR = false;
						} else {
							yyline++;
							yycolumn = 0;
						}
						break;
					default:
						zzR = false;
						yycolumn++;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one line
				// too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL) {
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				} else if (zzAtEOF) {
					zzPeek = false;
				} else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof) {
						zzPeek = false;
					} else {
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
					}
				}
				if (zzPeek) {
					yyline--;
				}
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = zzLexicalState;

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = zzBufferL[zzCurrentPosL++];
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) {
						break zzForAction;
					}
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) {
							break zzForAction;
						}
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 17: {
					throw new RuntimeException("Illegal Escape :" + yytext() + " at line " + yyline);
				}
				case 26:
					break;
				case 16: {
					return symbol(SymbolConstants.BOOLEAN_LITERAL, yytext());
				}
				case 27:
					break;
				case 6: {
					return symbol(SymbolConstants.LBRACE);
				}
				case 28:
					break;
				case 25: {
					string.append("\\r");
				}
				case 29:
					break;
				case 19: {
					string.append("\\'");
				}
				case 30:
					break;
				case 12: {
					string.append(yytext());
				}
				case 31:
					break;
				case 7: {
					return symbol(SymbolConstants.RBRACE);
				}
				case 32:
					break;
				case 10: {
					return symbol(SymbolConstants.COMMA);
				}
				case 33:
					break;
				case 23: {
					string.append("\\b");
				}
				case 34:
					break;
				case 20: {
					string.append("\\\\");
				}
				case 35:
					break;
				case 3: {
					return symbol(SymbolConstants.INT_LITERAL, yytext());
				}
				case 36:
					break;
				case 14: {
					yybegin(YYINITIAL);
					return symbol(SymbolConstants.STRING_LITERAL, string.toString());
				}
				case 37:
					break;
				case 24: {
					string.append("\\t");
				}
				case 38:
					break;
				case 8: {
					return symbol(SymbolConstants.LBRACK);
				}
				case 39:
					break;
				case 1: {
					throw new RuntimeException("Illegal Character :" + yytext() + " at line " + yyline);
				}
				case 40:
					break;
				case 18: {
					string.append("\\\"");
				}
				case 41:
					break;
				case 9: {
					return symbol(SymbolConstants.RBRACK);
				}
				case 42:
					break;
				case 11: {
					return symbol(SymbolConstants.SEMICOLON);
				}
				case 43:
					break;
				case 4: {
					return symbol(SymbolConstants.IDENTIFIER, yytext());
				}
				case 44:
					break;
				case 21: {
					string.append("\\n");
				}
				case 45:
					break;
				case 22: {
					string.append("\\f");
				}
				case 46:
					break;
				case 15: {
					return symbol(SymbolConstants.FLOAT_LITERAL, yytext());
				}
				case 47:
					break;
				case 5: {
					yybegin(STRING);
					string.setLength(0);
				}
				case 48:
					break;
				case 13: {
					throw new RuntimeException("Unterminated string literal :" + yytext() + " at line "
							+ yyline);
				}
				case 49:
					break;
				case 2: { /* ignore */
				}
				case 50:
					break;
				default:
					if ((zzInput == YYEOF) && (zzStartRead == zzCurrentPos)) {
						zzAtEOF = true;
						zzDoEOF();
						{
							return symbol(SymbolConstants.EOF);
						}
					} else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}

}
