// COPYRIGHT NOTICE (NOT TO BE REMOVED):
//
// This file, or parts of it, or modified versions of it, may not be copied,
// reproduced or transmitted in any form, including reprinting, translation,
// photocopying or microfilming, or by any means, electronic, mechanical or
// otherwise, or stored in a retrieval system, or used for any purpose, without
// the prior written permission of all Owners unless it is explicitly marked as
// having Classification `Public'.
//   Classification: Restricted.
//
// Owners of this file give notice:
//   (c) Copyright 2010-2011 PES Software Engineering for Embedded Systems, TU Berlin
//
// Authors:
//		Sabine Glesner
//		Robert Reicherdt
//		Elke Salecker
//		Volker Seeker
//		Joachim Kuhnert
// 		Roman Busse
//
// All rights, including copyrights, reserved.
//
// This file contains or may contain restricted information and is UNPUBLISHED
// PROPRIETARY SOURCE CODE OF THE Owners.  The Copyright Notice(s) above do not
// evidence any actual or intended publication of such source code.  This file
// is additionally subject to the conditions listed in the RESTRICTIONS file
// and is with NO WARRANTY.
//
// END OF COPYRIGHT NOTICE

//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Tue Jun 21 10:53:18 CEST 2011
//----------------------------------------------------

package de.tu_berlin.pes.memo.parser.stateflow.stateflowparser;

/** CUP generated interface containing symbol constants. */
public interface StateflowTransitionScannerSymbol {
	/* terminals */
	public static final int PLUSPLUS = 14;
	public static final int STRING_LITERAL = 46;
	public static final int GTEQ = 26;
	public static final int MULT = 6;
	public static final int LTEQ = 25;
	public static final int XOR = 30;
	public static final int LPAREN = 9;
	public static final int MULTASS = 34;
	public static final int MINUS = 17;
	public static final int TILDE = 49;
	public static final int RPAREN = 10;
	public static final int BOOLEAN_LITERAL = 45;
	public static final int OROR = 33;
	public static final int SEMICOLON = 47;
	public static final int NOT = 18;
	public static final int AND = 29;
	public static final int LT = 23;
	public static final int OR = 31;
	public static final int COMMA = 7;
	public static final int DIV = 19;
	public static final int ANDAND = 32;
	public static final int PLUS = 16;
	public static final int DOT = 5;
	public static final int ID = 4;
	public static final int EOF = 0;
	public static final int MINUSMINUS = 15;
	public static final int ASS = 8;
	public static final int error = 1;
	public static final int ORASS = 41;
	public static final int MODASS = 36;
	public static final int EQEQ = 27;
	public static final int MOD = 20;
	public static final int ANDASS = 39;
	public static final int LBRACK = 2;
	public static final int ARROW = 42;
	public static final int COLON = 11;
	public static final int FLOATING_POINT_LITERAL = 44;
	public static final int LBRACE = 12;
	public static final int RBRACK = 3;
	public static final int PLUSASS = 37;
	public static final int MINUSASS = 38;
	public static final int RBRACE = 13;
	public static final int LSHIFT = 21;
	public static final int POINTER = 48;
	public static final int DIVASS = 35;
	public static final int GT = 24;
	public static final int XORASS = 40;
	public static final int RSHIFT = 22;
	public static final int NOTEQ = 28;
	public static final int INTEGER_LITERAL = 43;
}
