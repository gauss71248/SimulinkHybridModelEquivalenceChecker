// COPYRIGHT NOTICE (NOT TO BE REMOVED):
//
// This file, or parts of it, or modified versions of it, may not be copied,
// reproduced or transmitted in any form, including reprinting, translation,
// photocopying or microfilming, or by any means, electronic, mechanical or
// otherwise, or stored in a retrieval system, or used for any purpose, without
// the prior written permission of all Owners unless it is explicitly marked as
// having Classification `Public'.
//   Classification: Restricted.
//
// Owners of this file give notice:
//   (c) Copyright 2010-2011 PES Software Engineering for Embedded Systems, TU Berlin
//
// Authors:
//		Sabine Glesner
//		Robert Reicherdt
//		Elke Salecker
//		Volker Seeker
//		Joachim Kuhnert
// 		Roman Busse
//
// All rights, including copyrights, reserved.
//
// This file contains or may contain restricted information and is UNPUBLISHED
// PROPRIETARY SOURCE CODE OF THE Owners.  The Copyright Notice(s) above do not
// evidence any actual or intended publication of such source code.  This file
// is additionally subject to the conditions listed in the RESTRICTIONS file
// and is with NO WARRANTY.
//
// END OF COPYRIGHT NOTICE

/* The following code was generated by JFlex 1.4.1 on 15.06.11 11:52 */

/*
 *  TEMPLATE for JFLEX-SCANNER 
 */

package de.tu_berlin.pes.memo.parser.stateflow.stateflowparser;

import java_cup.runtime.Symbol;
import de.tu_berlin.pes.memo.MeMoPlugin;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4.1 on 15.06.11 11:52 from the specification file
 * <tt>D:/kuhnert/workspaceIntern/de.tu_berlin.pes.memo.parser.stateflow/grammar/StateflowStateScanner.jflex</tt>
 */
public class StateflowStateScanner implements java_cup.runtime.Scanner, StateflowStateScannerSymbol {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int STRING = 1;
	public static final int YYINITIAL = 0;
	public static final int COMMENT = 2;

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\12\0\1\60\2\0\1\31\22\0\1\3\1\52\3\0\1\30\1\46"
			+ "\1\33\1\36\1\37\1\32\1\42\1\35\1\44\1\24\1\27\1\2"
			+ "\11\21\1\20\1\34\1\50\1\43\1\51\2\0\2\22\1\25\3\22"
			+ "\21\1\1\23\2\1\1\40\1\26\1\41\1\47\1\1\1\0\1\55"
			+ "\1\16\1\22\1\11\1\4\1\54\1\14\1\1\1\13\2\1\1\56"
			+ "\1\1\1\5\1\17\2\1\1\7\1\57\1\6\1\12\2\1\1\15" + "\1\10\1\1\1\0\1\45\1\0\1\53\uff81\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\3\0\1\1\1\2\1\3\5\2\1\4\1\3\1\5"
			+ "\1\1\1\6\1\1\1\7\1\10\1\11\1\12\1\13" + "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"
			+ "\1\24\1\25\1\26\1\27\1\30\1\2\1\31\1\32" + "\1\33\1\32\2\0\1\34\2\35\1\2\1\35\1\2"
			+ "\1\35\1\20\1\36\1\0\1\37\1\40\1\41\1\42" + "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"
			+ "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62" + "\1\63\1\64\1\65\1\2\1\66\1\67\1\0\1\2"
			+ "\1\70\1\0\1\2\1\71\1\2\1\0\1\2\1\72" + "\1\2\1\0\1\73\1\74\1\41\2\2\1\35\1\75"
			+ "\1\2\1\35\1\76\1\41\1\2\1\35\1\2\1\0" + "\1\77\1\41\1\100\1\35\1\0";

	private static int[] zzUnpackAction() {
		int[] result = new int[110];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"
			+ "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"
			+ "\0\u0310\0\u0341\0\223\0\223\0\223\0\223\0\223\0\223"
			+ "\0\223\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498"
			+ "\0\u04c9\0\u04fa\0\u04fa\0\u052b\0\u055c\0\223\0\223\0\u058d"
			+ "\0\u05be\0\u05ef\0\223\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4"
			+ "\0\u0715\0\223\0\u0746\0\u0777\0\223\0\223\0\u07a8\0\223"
			+ "\0\223\0\223\0\223\0\223\0\223\0\223\0\223\0\223"
			+ "\0\223\0\223\0\223\0\223\0\223\0\223\0\223\0\223"
			+ "\0\223\0\223\0\223\0\u07d9\0\223\0\u05be\0\u080a\0\u083b"
			+ "\0\223\0\u086c\0\u089d\0\223\0\u08ce\0\u08ff\0\u0930\0\223"
			+ "\0\u0961\0\u0992\0\223\0\223\0\u09c3\0\u09f4\0\u0a25\0\u0a56"
			+ "\0\304\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad"
			+ "\0\u0bde\0\223\0\u0c0f\0\304\0\u0c40\0\u0b1a";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[110];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\1\4\1\5\1\6\1\4\1\7\1\5\1\10\2\5"
			+ "\1\11\4\5\1\12\1\13\1\14\1\15\2\5\1\16" + "\1\5\1\17\1\20\1\21\1\4\1\22\1\23\1\24"
			+ "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34" + "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"
			+ "\3\5\1\0\1\4\1\45\1\4\1\46\14\45\2\4" + "\2\45\1\4\1\45\5\4\1\47\20\4\4\45\1\0"
			+ "\26\46\1\50\2\46\1\4\26\46\63\0\2\5\1\0" + "\14\5\1\0\3\5\1\0\1\5\26\0\4\5\16\0"
			+ "\1\51\5\0\1\51\1\52\1\53\34\0\2\5\1\0" + "\1\5\1\54\7\5\1\55\2\5\1\0\3\5\1\0"
			+ "\1\5\26\0\4\5\2\0\2\5\1\0\3\5\1\56" + "\10\5\1\0\3\5\1\0\1\5\26\0\4\5\2\0"
			+ "\2\5\1\0\6\5\1\57\5\5\1\0\3\5\1\0" + "\1\5\26\0\4\5\2\0\2\5\1\0\7\5\1\60"
			+ "\4\5\1\0\3\5\1\0\1\5\26\0\4\5\2\0" + "\2\5\1\0\1\5\1\61\12\5\1\0\3\5\1\0"
			+ "\1\5\26\0\4\5\44\0\1\62\17\0\1\15\16\0" + "\1\15\2\0\1\52\1\53\35\0\1\63\16\0\1\63"
			+ "\2\0\1\64\41\0\1\65\102\0\1\66\2\0\1\67" + "\10\0\1\70\15\0\30\71\1\72\1\0\26\71\44\0"
			+ "\1\73\57\0\1\74\1\75\60\0\1\76\60\0\1\77"
			+ "\1\100\4\0\1\101\52\0\1\102\1\0\1\103\56\0"
			+ "\1\104\2\0\1\105\55\0\1\106\60\0\1\107\4\0"
			+ "\1\110\1\111\52\0\1\112\5\0\1\113\52\0\1\111" + "\16\0\2\5\1\0\14\5\1\0\3\5\1\0\1\5"
			+ "\26\0\1\5\1\114\2\5\2\0\2\45\1\0\14\45" + "\1\0\3\45\1\0\1\45\26\0\4\45\6\0\1\115"
			+ "\55\0\1\116\1\0\1\116\4\0\1\116\4\0\1\116" + "\2\0\2\116\2\0\1\116\26\0\2\116\5\0\1\63"
			+ "\16\0\1\63\40\0\2\5\1\117\2\5\1\120\11\5" + "\1\121\3\5\1\0\1\5\26\0\4\5\2\0\2\5"
			+ "\1\122\7\5\1\123\4\5\1\124\3\5\1\0\1\5" + "\26\0\4\5\2\0\2\5\1\0\6\5\1\125\5\5"
			+ "\1\0\3\5\1\0\1\5\26\0\4\5\2\0\2\5" + "\1\126\3\5\1\127\10\5\1\130\3\5\1\0\1\5"
			+ "\26\0\4\5\2\0\2\5\1\0\1\5\1\131\12\5" + "\1\0\3\5\1\0\1\5\26\0\4\5\2\0\2\5"
			+ "\1\132\14\5\1\0\3\5\1\0\1\5\26\0\4\5" + "\3\0\1\63\16\0\1\63\3\0\1\133\57\0\1\134"
			+ "\34\0\32\67\1\135\26\67\1\0\2\5\1\0\14\5" + "\1\0\3\5\1\0\1\5\26\0\2\5\1\136\1\5"
			+ "\4\0\1\117\14\0\1\121\41\0\2\5\1\0\3\5" + "\1\137\10\5\1\0\3\5\1\0\1\5\26\0\4\5"
			+ "\4\0\1\122\14\0\1\124\41\0\2\5\1\0\2\5" + "\1\140\11\5\1\0\3\5\1\0\1\5\26\0\4\5"
			+ "\2\0\2\5\1\0\1\141\13\5\1\0\3\5\1\0" + "\1\5\26\0\4\5\4\0\1\126\14\0\1\130\41\0"
			+ "\2\5\1\0\7\5\1\142\4\5\1\0\3\5\1\0" + "\1\5\26\0\4\5\2\0\2\5\1\0\5\5\1\143"
			+ "\6\5\1\0\3\5\1\0\1\5\26\0\4\5\2\0" + "\1\144\1\0\1\132\14\144\2\0\2\144\1\0\1\144"
			+ "\26\0\4\144\1\0\27\67\1\145\2\67\1\135\26\67" + "\1\0\2\5\1\0\14\5\1\0\3\5\1\0\1\5"
			+ "\26\0\3\5\1\146\2\0\2\5\1\0\4\5\1\147" + "\7\5\1\0\3\5\1\0\1\5\26\0\4\5\2\0"
			+ "\2\5\1\122\14\5\1\124\3\5\1\0\1\5\26\0" + "\4\5\2\0\2\5\1\0\1\5\1\150\12\5\1\0"
			+ "\3\5\1\0\1\5\26\0\4\5\2\0\2\5\1\151" + "\14\5\1\152\3\5\1\0\1\5\26\0\4\5\2\0"
			+ "\2\144\1\0\14\144\1\0\3\144\1\0\1\144\26\0"
			+ "\4\144\1\0\32\67\1\153\26\67\1\0\2\5\1\0" + "\1\154\13\5\1\0\3\5\1\0\1\5\26\0\4\5"
			+ "\2\0\2\5\1\117\14\5\1\121\3\5\1\0\1\5" + "\26\0\4\5\2\0\2\5\1\0\10\5\1\155\3\5"
			+ "\1\0\3\5\1\0\1\5\26\0\4\5\4\0\1\151" + "\14\0\1\152\40\0\27\67\1\156\2\67\1\135\26\67"
			+ "\1\0\2\5\1\126\14\5\1\130\3\5\1\0\1\5" + "\26\0\4\5\1\0";

	private static int[] zzUnpackTrans() {
		int[] result = new int[3185];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error",
			"Error: could not match input", "Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\3\0\1\11\16\1\7\11\14\1\2\11\1\1\2\0"
			+ "\1\11\6\1\1\11\1\1\1\0\2\11\1\1\24\11" + "\1\1\1\11\1\1\1\0\1\1\1\11\1\0\1\1"
			+ "\1\11\1\1\1\0\1\1\1\11\1\1\1\0\2\11" + "\14\1\1\0\1\11\3\1\1\0";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[110];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do {
				result[j++] = value;
			} while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of
	 * the yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the textposition at the last state to be included in yytext */
	private int zzPushbackPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from
	 * input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the
	 * matched text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/* user code: */
	boolean debug = false;
	private StringBuffer string = new StringBuffer();

	public void setDebug(boolean debug) {
		this.debug = debug;
	}

	private Symbol symbol(int sym) {
		return new Symbol(sym, yyline + 1, yycolumn + 1);
	}

	private Symbol symbol(int sym, Object val) {
		return new Symbol(sym, yyline + 1, yycolumn + 1, val);
	}

	private void out(String message) {
		if (debug) {
			MeMoPlugin.out.println("LEX: " + message);
		}
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 *
	 * @param in
	 *           the java.io.Reader to read input from.
	 */
	public StateflowStateScanner(java.io.Reader in) {
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 *
	 * @param in
	 *           the java.io.Inputstream to read input from.
	 */
	public StateflowStateScanner(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in));
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed
	 *           the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x10000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 134) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do {
				map[j++] = value;
			} while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException
	 *               if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzPushbackPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzCurrentPos * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
		}

		/* finally: fill the buffer with new input */
		int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);

		if (numRead < 0) {
			return true;
		} else {
			zzEndRead += numRead;
			return false;
		}
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null) {
			zzReader.close();
		}
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the old
	 * reader.
	 *
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 *
	 * @param reader
	 *           the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState
	 *           the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos
	 *           the position of the character to fetch. A value from 0 to
	 *           yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen". If this method is called, something is seriously
	 * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done in error fallback
	 * rules.
	 *
	 * @param errorCode
	 *           the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number
	 *           the number of characters to be read again. This number must not
	 *           be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength()) {
			zzScanError(ZZ_PUSHBACK_2BIG);
		}

		zzMarkedPos -= number;
	}

	/**
	 * Contains user EOF-code, which will be executed exactly once, when the end
	 * of file is reached
	 */
	private void zzDoEOF() throws java.io.IOException {
		if (!zzEOFDone) {
			zzEOFDone = true;
			yyclose();
		}
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @exception java.io.IOException
	 *               if any I/O-Error occurs
	 */
	@Override
	public java_cup.runtime.Symbol next_token() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			boolean zzR = false;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
				switch (zzBufferL[zzCurrentPosL]) {
					case '\u000B':
					case '\u000C':
					case '\u0085':
					case '\u2028':
					case '\u2029':
						yyline++;
						yycolumn = 0;
						zzR = false;
						break;
					case '\r':
						yyline++;
						yycolumn = 0;
						zzR = true;
						break;
					case '\n':
						if (zzR) {
							zzR = false;
						} else {
							yyline++;
							yycolumn = 0;
						}
						break;
					default:
						zzR = false;
						yycolumn++;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one line
				// too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL) {
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				} else if (zzAtEOF) {
					zzPeek = false;
				} else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof) {
						zzPeek = false;
					} else {
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
					}
				}
				if (zzPeek) {
					yyline--;
				}
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = zzLexicalState;

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = zzBufferL[zzCurrentPosL++];
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = zzBufferL[zzCurrentPosL++];
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1) {
						break zzForAction;
					}
					zzState = zzNext;

					int zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8) {
							break zzForAction;
						}
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
				case 14: {
					out("RightBracket");
					return symbol(StateflowStateScannerSymbol.RBRACK);
				}
				case 65:
					break;
				case 25: {
					out("APPENDING STRING: " + yytext());
					string.append(yytext());
				}
				case 66:
					break;
				case 32: {
					out("C-Comment.Switching to Comment-MODE: " + yytext());
					string.setLength(0);
					yybegin(COMMENT);
				}
				case 67:
					break;
				case 44: {
					out("ORAssignment");
					return symbol(StateflowStateScannerSymbol.ORASS);
				}
				case 68:
					break;
				case 33: {
					out("C-BlockComment: " + yytext());
				}
				case 69:
					break;
				case 49: {
					out("SmallerOrEquals");
					return symbol(StateflowStateScannerSymbol.LTEQ);
				}
				case 70:
					break;
				case 47: {
					out("LogicalAnd");
					return symbol(StateflowStateScannerSymbol.ANDAND);
				}
				case 71:
					break;
				case 60: {
					out("IGNORED TripleDot");
				}
				case 72:
					break;
				case 53: {
					out("RightShift");
					return symbol(StateflowStateScannerSymbol.RSHIFT);
				}
				case 73:
					break;
				case 45: {
					out("LogicalOR");
					return symbol(StateflowStateScannerSymbol.OROR);
				}
				case 74:
					break;
				case 46: {
					out("ANDAssignment");
					return symbol(StateflowStateScannerSymbol.ANDASS);
				}
				case 75:
					break;
				case 35: {
					out("MATLAB-Comment.Switching to Comment-MODE: " + yytext());
					string.setLength(0);
					yybegin(COMMENT);
				}
				case 76:
					break;
				case 10: {
					out("Comma");
					return symbol(StateflowStateScannerSymbol.COMMA);
				}
				case 77:
					break;
				case 56: {
					out("Keyword: Entry" + "...PUSH BACK TO INPUT: "
							+ yytext().substring(yytext().lastIndexOf(":")));
					yypushback(((yytext().length()) - (yytext().lastIndexOf(":"))));
					return symbol(StateflowStateScannerSymbol.ENTRY);
				}
				case 78:
					break;
				case 54: {
					yybegin(YYINITIAL);
					out("FOUND Comment: " + string.toString());
				}
				case 79:
					break;
				case 3: {
					out("INT: " + yytext());
					return symbol(StateflowStateScannerSymbol.INTEGER_LITERAL, new Long(yytext()));
				}
				case 80:
					break;
				case 29: {
					out("ActionString: " + yytext());
					return symbol(StateflowStateScannerSymbol.ID, yytext());
				}
				case 81:
					break;
				case 24: {
					out("TildeNot");
					return symbol(StateflowStateScannerSymbol.NOT);
				}
				case 82:
					break;
				case 12: {
					out("RightParenthesis");
					return symbol(StateflowStateScannerSymbol.RPAREN);
				}
				case 83:
					break;
				case 62: {
					out("Keyword: on" + "...PUSH BACK TO INPUT: " + yytext().substring(2));
					yypushback(((yytext().length()) - 2));
					return symbol(StateflowStateScannerSymbol.ON);
				}
				case 84:
					break;
				case 8: {
					out("FUNCTION-ARGUMENT-STRING WILL FOLLOW");
					string.setLength(0);
					yybegin(STRING);
				}
				case 85:
					break;
				case 51: {
					out("NotEquals");
					return symbol(StateflowStateScannerSymbol.NOTEQ);
				}
				case 86:
					break;
				case 38: {
					out("Increment");
					return symbol(StateflowStateScannerSymbol.PLUSPLUS);
				}
				case 87:
					break;
				case 4: {
					out("Colon");
					return symbol(StateflowStateScannerSymbol.COLON);
				}
				case 88:
					break;
				case 13: {
					out("LeftBracket");
					return symbol(StateflowStateScannerSymbol.LBRACK);
				}
				case 89:
					break;
				case 16: {
					out("Assignment");
					return symbol(StateflowStateScannerSymbol.ASS);
				}
				case 90:
					break;
				case 28: {
					out("CONST_INTEGER: " + yytext());
					string.setLength(0);
					string.append(yytext());
					string.deleteCharAt(string.length() - 1);
					return symbol(StateflowStateScannerSymbol.INTEGER_LITERAL,
							new Long(string.toString()));
				}
				case 91:
					break;
				case 42: {
					out("Decrement");
					return symbol(StateflowStateScannerSymbol.MINUSMINUS);
				}
				case 92:
					break;
				case 15: {
					out("Plus");
					return symbol(StateflowStateScannerSymbol.PLUS);
				}
				case 93:
					break;
				case 61: {
					out("True literal");
					return symbol(StateflowStateScannerSymbol.BOOLEAN_LITERAL, new Boolean(true));
				}
				case 94:
					break;
				case 20: {
					out("ExclusiveOR");
					return symbol(StateflowStateScannerSymbol.XOR);
				}
				case 95:
					break;
				case 27: {
					yybegin(YYINITIAL);
					out("FOUND STRING: " + "'" + string.toString() + "'");
					return symbol(StateflowStateScannerSymbol.STRING_LITERAL, string.toString());
				}
				case 96:
					break;
				case 58: {
					out("Keyword: During" + "...PUSH BACK TO INPUT: "
							+ yytext().substring(yytext().lastIndexOf(":")));
					yypushback(((yytext().length()) - (yytext().lastIndexOf(":"))));
					return symbol(StateflowStateScannerSymbol.DURING);
				}
				case 97:
					break;
				case 39: {
					out("AddAssignment");
					return symbol(StateflowStateScannerSymbol.PLUSASS);
				}
				case 98:
					break;
				case 5: {
					out("Dot");
					return symbol(StateflowStateScannerSymbol.DOT);
				}
				case 99:
					break;
				case 63: {
					out("Keyword: Bind" + "...PUSH BACK TO INPUT: "
							+ yytext().substring(yytext().lastIndexOf(":")));
					yypushback(((yytext().length()) - (yytext().lastIndexOf(":"))));
					return symbol(StateflowStateScannerSymbol.BIND);
				}
				case 100:
					break;
				case 52: {
					out("GreaterOrEquals");
					return symbol(StateflowStateScannerSymbol.GTEQ);
				}
				case 101:
					break;
				case 22: {
					out("GreaterThan");
					return symbol(StateflowStateScannerSymbol.GT);
				}
				case 102:
					break;
				case 55: {
					out("HEXADEZIMAL_NUMBER: " + yytext());
					string.setLength(0);
					string.append(yytext());
					string.delete(0, 2);
					return symbol(StateflowStateScannerSymbol.INTEGER_LITERAL,
							new Long(Long.parseLong(string.toString(), 16)));
				}
				case 103:
					break;
				case 21: {
					out("SmallerThan");
					return symbol(StateflowStateScannerSymbol.LT);
				}
				case 104:
					break;
				case 59: {
					out("CONST_FLOAT: " + yytext());
					string.setLength(0);
					string.append(yytext());
					string.deleteCharAt(string.length() - 1);
					return symbol(StateflowStateScannerSymbol.FLOATING_POINT_LITERAL,
							new Float(string.toString()));
				}
				case 105:
					break;
				case 57: {
					out("Keyword: Exit" + "...PUSH BACK TO INPUT: "
							+ yytext().substring(yytext().lastIndexOf(":")));
					yypushback(((yytext().length()) - (yytext().lastIndexOf(":"))));
					return symbol(StateflowStateScannerSymbol.EXIT);
				}
				case 106:
					break;
				case 11: {
					out("LeftParenthesis");
					return symbol(StateflowStateScannerSymbol.LPAREN);
				}
				case 107:
					break;
				case 31: {
					out("IGNORED MATLABNewLine Symbol");
				}
				case 108:
					break;
				case 30: {
					out("FLOAT_NUMBER: " + yytext());
					return symbol(StateflowStateScannerSymbol.FLOATING_POINT_LITERAL,
							new Float(yytext()));
				}
				case 109:
					break;
				case 40: {
					out("Equals");
					return symbol(StateflowStateScannerSymbol.EQEQ);
				}
				case 110:
					break;
				case 48: {
					out("XORAssignment");
					return symbol(StateflowStateScannerSymbol.XORASS);
				}
				case 111:
					break;
				case 19: {
					out("InclusiveAnd");
					return symbol(StateflowStateScannerSymbol.AND);
				}
				case 112:
					break;
				case 1: { // out("Illegal character <"+ yytext()+">");
				}
				case 113:
					break;
				case 18: {
					out("InclusiveOr");
					return symbol(StateflowStateScannerSymbol.OR);
				}
				case 114:
					break;
				case 37: {
					out("MultAssignment");
					return symbol(StateflowStateScannerSymbol.MULTASS);
				}
				case 115:
					break;
				case 7: {
					out("Multiplication");
					return symbol(StateflowStateScannerSymbol.MULT);
				}
				case 116:
					break;
				case 23: {
					out("NOT");
					return symbol(StateflowStateScannerSymbol.NOT);
				}
				case 117:
					break;
				case 2: {
					out("IDENT: " + yytext());
					return symbol(StateflowStateScannerSymbol.ID, yytext());
				}
				case 118:
					break;
				case 26: {
					string.append(yytext());
				}
				case 119:
					break;
				case 50: {
					out("LeftShift");
					return symbol(StateflowStateScannerSymbol.LSHIFT);
				}
				case 120:
					break;
				case 64: {
					out("False literal");
					return symbol(StateflowStateScannerSymbol.BOOLEAN_LITERAL, new Boolean(false));
				}
				case 121:
					break;
				case 34: {
					out("DivAssignment");
					return symbol(StateflowStateScannerSymbol.DIVASS);
				}
				case 122:
					break;
				case 6: {
					out("DIV");
					return symbol(StateflowStateScannerSymbol.DIV);
				}
				case 123:
					break;
				case 9: {
					out("SemiColon");
					return symbol(StateflowStateScannerSymbol.SEMICOLON);
				}
				case 124:
					break;
				case 17: {
					out("Minus");
					return symbol(StateflowStateScannerSymbol.MINUS);
				}
				case 125:
					break;
				case 43: {
					out("StructArrow ->");
					return symbol(StateflowStateScannerSymbol.ARROW);
				}
				case 126:
					break;
				case 36: {
					out("Modulo");
					return symbol(StateflowStateScannerSymbol.MOD);
				}
				case 127:
					break;
				case 41: {
					out("SubAssignment");
					return symbol(StateflowStateScannerSymbol.MINUSASS);
				}
				case 128:
					break;
				default:
					if ((zzInput == YYEOF) && (zzStartRead == zzCurrentPos)) {
						zzAtEOF = true;
						zzDoEOF();
						{
							return new Symbol(StateflowStateScannerSymbol.EOF);
						}
					} else {
						zzScanError(ZZ_NO_MATCH);
					}
			}
		}
	}

}
